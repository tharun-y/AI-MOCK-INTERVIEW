import mongoose from "mongoose";

// Stub function to generate AI answer.
// Replace this with your actual AI service call.
async function generateAIAnswer(question, answer) {
  // For example, you might call an external API here.
  // This stub simply returns a custom string.
  return `AI generated answer for: "${question}"`;
}

const feedbackSchema = new mongoose.Schema({
  authenticate: {
    type: String,
    required: true,
  },
  name: {
    type: String,
    required: true,
  },
  feedbackId: {
    type: Number,
    required: true,
  },
  jobPosition: {
    type: String,
    required: true,
  },
  techStack: {
    type: String,
    required: true,
  },
  experience: {
    type: String,
    required: true,
  },
  jobDescription: {
    type: String,
    required: true,
  },
  difficultyLevel: {
    type: Number,
    required: true,
  },
  questions: {
    type: Number,
    required: true,
    min: 1,
  },
  questionAnswers: {
    type: [
      {
        question: { type: String, required: true },
        answer: { type: String, required: true },
        // Set a default value, which will be replaced in the pre-save hook.
        answerbyAI: {
          type: String,
          required: true,
          default: "ANSWER GENERATED BY AI",
        },
      },
    ],
    validate: {
      validator: function (v) {
        return v.length === this.questions;
      },
      message: (props) =>
        `Number of questions (${props.value.length}) does not match the 'questions' field (${this.questions}).`,
    },
  },
  overallFeedback: {
    type: String,
    required: true,
  },
}, { timestamps: true });

// Pre-save middleware that replaces the placeholder with an AI-generated answer.
feedbackSchema.pre("save", async function (next) {
  try {
    for (let i = 0; i < this.questionAnswers.length; i++) {
      const qAnswer = this.questionAnswers[i];
      // If the placeholder text is present, generate a new answer.
      if (qAnswer.answerbyAI === "ANSWER GENERATED BY AI") {
        const generatedAnswer = await generateAIAnswer(
          qAnswer.question,
          qAnswer.answer
        );
        qAnswer.answerbyAI = generatedAnswer;
      }
    }
    next();
  } catch (error) {
    next(error);
  }
});

const Feedback = mongoose.model("Feedback", feedbackSchema);
export default Feedback;
